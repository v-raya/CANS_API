import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

import static org.gradle.api.logging.LogLevel.INFO

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id "org.sonarqube" version "2.5"
    id 'net.ltgt.apt' version '0.9'
    id "com.github.hierynomus.license" version "0.14.0"
    id 'com.github.jk1.dependency-license-report' version '0.8'
    id 'com.github.sherter.google-java-format' version '0.7.1'
}

project.logging.setLevelInternal(INFO)

project.ext {
    projectGroup = 'gov.ca.cwds.cans'
    projectDockerGroup = 'cwds'
    projectDockerAppName = 'cans-api'
    mainClass = 'gov.ca.cwds.cans.CansApplication'
    projectMajorVersion = '0.10.2'
    dataModelVersion = '0.10.1_689-RC'
    coreApiVersion = '1.10.2_877-RC'
    apiSecurityVersion = '4.0.0_1010-RC'
    dropwizardVersion = '1.1.0'
    hibernateVersion = '5.2.16.Final'
    mapstructVersion = '1.2.0.Final'
    lombokVersion = '1.16.18'

    isRelease = System.getProperty("Release") == "true"
    buildNumber = System.getProperty('BuildNumber')
    customVersion = System.getProperty('CustomVersion')

    projectSnapshotVersion = projectMajorVersion + "-SNAPSHOT"
    projectReleaseVersion = (customVersion == null || customVersion == "" || customVersion.startsWith('$') ? projectMajorVersion + '_' + buildNumber + '-RC' : customVersion)
    projectVersion = (isRelease ? projectReleaseVersion : projectSnapshotVersion)
    dockerTag = projectVersion

    // assumed that Windows users use the Docker Toolbox
    buildEnv = System.env.BUILD_ENV ?: (Os.isFamily(Os.FAMILY_WINDOWS) ? 'WIN_DEV' : 'JENKINS')
    devDockerHost = System.env.DEV_DOCKER_HOST ?: '192.168.99.100'
    devDockerPort = 2376

    // Publishing configuration
    snapshotMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/repo"
    releaseMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/libs-release"
    artifactoryRepo = (isRelease ? releaseMavenRepo : snapshotMavenRepo)
}

group projectGroup
version projectVersion

repositories {
    mavenLocal()
    maven {
        url "http://sonar.dev.cwds.io:8081/artifactory/repo"
    }
    mavenCentral()
}

apply plugin: "jacoco"
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

sonarqube {
    properties {
        property "sonar.projectName", "${name}"
        property "sonar.projectKey", "${group}:${name}"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        // Methods in DTO and Entity classes are generated by lombok and therefore should not be tested
        property "sonar.exclusions", [
                "**/gov/ca/cwds/cans/domain/**",
                "**/gov/ca/cwds/cans/Constants.java",
                "**/gov/ca/cwds/cans/**/*Exception.java"
        ]
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${project.buildDir}/jacocoHtml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'org/hibernate/*',
                    "**/gov/ca/cwds/cans/Constants.java"
            ])
        })
    }
}

configurations.all {
    // Check for updates every  build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile group: 'gov.ca.cwds.cals', name: 'cans-ns-data-model', version: dataModelVersion, changing: true
    compile group: 'gov.ca.cwds.api', name: 'legacy-data-access', version: coreApiVersion
    compile group: 'gov.ca.cwds.api', name: 'api-core-cms', version: coreApiVersion
    compile group: 'gov.ca.cwds.api', name: 'api-core-abac', version: coreApiVersion
    compile group: 'gov.ca.cwds.api', name: 'api-core-rest', version: coreApiVersion
    compile group: 'gov.ca.cwds.api', name: 'api-security', version: apiSecurityVersion
    compile group: 'gov.ca.cwds.api', name: 'drools-engine', version: coreApiVersion

    compile group: 'io.dropwizard', name: 'dropwizard-core', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-hibernate', version: dropwizardVersion
    compile group: 'org.hibernate', name: 'hibernate-ehcache', version: hibernateVersion
    compile group: 'org.hibernate', name: 'hibernate-envers', version: hibernateVersion
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'

    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.14'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.1'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    compile 'org.mapstruct:mapstruct-jdk8:' + mapstructVersion
    compileOnly 'org.projectlombok:lombok:' + lombokVersion

    testCompile group: 'gov.ca.cwds.api', name: 'api-core-test-support', version: coreApiVersion
    testCompile group: 'gov.ca.cwds.cals', name: 'cws-cms-data-model', version: dataModelVersion, changing: true
    testCompile group: 'gov.ca.cwds.api', name: 'api-security-test-support', version: apiSecurityVersion
    testCompile 'io.dropwizard:dropwizard-testing:' + dropwizardVersion
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.4'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.4'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.194'
    testCompile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    apt 'org.mapstruct:mapstruct-processor:' + mapstructVersion
    apt 'org.projectlombok:lombok:' + lombokVersion
}

mainClassName = mainClass


import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
task formatGoogleJava(type: GoogleJavaFormat) {
    source 'src/main'
    source 'src/test'
    include '**/*.java'
    exclude '**/*Template.java'
}

compileJava.dependsOn(formatGoogleJava)

task convertEntrypointToLF(type: Copy) {
    from projectDir
    into project.buildDir
    include 'entrypoint.sh'
    filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("lf"))
}

shadowJar {
    classifier = 'dist'
    baseName = 'cans-api'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainClassName
    }
    version = ''
    zip64 = true
}

run {
    args 'server', './config/cans-api.yml'
}

runShadow {
    args 'server', './config/cans-api.yml'
}

test {
    systemProperty 'java.net.preferIPv4Stack', 'true'
    exclude '**/SmokeTestSuite.class',
            '**/FunctionalTestSuite.class',
            '**/*ResourceTest.class',
            '**/*ResourceAuthorizationTest.class'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}


task functionalTest(type: Test, dependsOn: testClasses) {
    // URL where functional tests will be pointed to (may be changed in gradle.properties)
    systemProperty 'api.url', project.property('api.url')
    systemProperty 'perry.url', project.property('perry.url')
    systemProperty 'login.form.target.url', project.property('login.form.target.url')
    include '**/FunctionalTestSuite.*'
    outputs.upToDateWhen { false }
}

task smokeTest(type: Test) {
    // URL where smoke tests will be pointed to (may be changed in gradle.properties)
    systemProperty 'api.url', project.property('api.url')
    include '**/SmokeTestSuite.*'
    outputs.upToDateWhen { false }
}

task copyConfig(type: Copy) {
    from 'config'
    into 'build/docker/config'
}

task copyDist(type: Copy, dependsOn: shadowJar) {
    from 'build/libs'
    into 'build/docker/libs'
}


def releaseDocker = System.getProperty("ReleaseDocker")

task readArguments() {
    doLast {
        println "ReleaseDocker: " + releaseDocker
        println "Build: " + buildNumber
        println "Docker Tag: " + dockerTag
    }
}


task apiDocker(type: Docker, dependsOn: [copyConfig, copyDist]) {
    dockerfile = "Dockerfile"
    project.group = projectDockerGroup
    applicationName = projectDockerAppName
    tagVersion = dockerTag
}

task createDockerImage(type: Exec, dependsOn: [convertEntrypointToLF, shadowJar]) {
    commandLine 'docker', 'build', '-t', "cwds/cans-api", '.'
}

task tagDockerImage(type: Exec, dependsOn: createDockerImage) {
    commandLine 'docker', 'tag', "cwds/cans-api", "cwds/cans-api:$dockerTag"
}

task pushDockerLatest(type: Exec, dependsOn: createDockerImage) {
    commandLine 'docker', 'push', "cwds/cans-api:latest"
}

task pushDockerVersionTagged(type: Exec, dependsOn: tagDockerImage) {
    commandLine 'docker', 'push', "cwds/cans-api:$dockerTag"
}

task dropDockerImage(type: Exec) {
    commandLine 'docker', 'rmi', "cwds/cans-api:$dockerTag"
    commandLine 'docker', 'rmi', "cwds/cans-api:latest"

}

task publishDocker(dependsOn: [pushDockerVersionTagged, pushDockerLatest]) {
    doLast {
        println 'Published'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

processResources {
    filter(ReplaceTokens, tokens: [
            'build.version': projectVersion,
            'build.number' : (System.getenv("BUILD_NUMBER") ?: "IDE")
    ])
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId projectGroup
            artifactId rootProject.name
        }
    }
    repositories {
        maven {
            url artifactoryRepo
        }
    }
}

licenseReport {
    renderers = [new XmlReportRenderer(), new CwdsCsvReportRenderer(), new InventoryHtmlReportRenderer()]
    excludeGroups = ['gov.ca.cwds.api.libs']
}

def licenceFolder = 'build/reports/dependency-license'
task libLicenceFolders(type: Copy) {
    from licenceFolder
    into 'legal/licenses'
    exclude "index.html"
    exclude "index.xml"
    exclude "licenses.csv"
}

import com.github.jk1.license.render.*

task libLicenseReportFiles(type: Copy) {
    from licenceFolder
    into 'legal'
    include "index.html"
    include "index.xml"
    include "licenses.csv"
}

task libLicenseReport(dependsOn: [generateLicenseReport, libLicenceFolders,
                                  libLicenseReportFiles]) {
    println("\n\n License files are generated in : ${licenceFolder}")
}

import com.github.jk1.license.ModuleData
import com.github.jk1.license.ProjectData
import com.github.jk1.license.LicenseReportExtension

class CwdsCsvReportRenderer extends CsvReportRenderer {
    @Override
    void render(ProjectData data) {
        LicenseReportExtension config = data.project.licenseReport
        File output = new File(config.outputDir, filename)
        output.write('')

        if (includeHeaderLine) {
            output << header()
        }

        data.allDependencies.sort().each {
            renderDependency(output, it)
        }
    }

    CwdsCsvReportRenderer(String filename = 'licenses.csv') {
        this.filename = filename
    }

    void renderDependency(File output, ModuleData data) {
        output << line(data)
    }

    private String header() {
        return "${quote('artifact')}$separator${quote('name')}$separator${quote('version')}$separator${quote('moduleUrl')}$separator${quote('moduleLicense')}$separator${quote('moduleLicenseUrl')}$separator${quote('projectUrl')}$separator$nl"
    }

    private String line(ModuleData data) {
        def (String moduleUrl, String moduleLicense, String moduleLicenseUrl) = LicenseDataCollector.singleModuleLicenseInfo(data)
        String artifact = "${data.group}:${data.name}:${data.version}"
        return "${quote(artifact)}$separator${quote(data.name)}$separator${quote(data.version)}$separator${quote(moduleUrl)}$separator${quote(moduleLicense)}$separator${quote(moduleLicenseUrl)}$separator${quote(projectUrl(data))}$separator$nl"
    }

    private String projectUrl(ModuleData data) {
        Set urls = new HashSet()
        data.poms.each {
            urls << it.projectUrl
        }
        urls.join(" ")
    }

    private String quote(String content) {
        if (content == null || content.isEmpty()) {
            return ''
        }
        content = content.trim()
        content = content.replaceAll(quote, "\\\\$quote")
        "${quote}${content}${quote}"
    }
}
