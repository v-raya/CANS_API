import gov.ca.cwds.cans.domain.entity.Assessment
import gov.ca.cwds.cans.domain.entity.Person
import gov.ca.cwds.security.realm.PerryAccount
import gov.ca.cwds.cans.domain.enumeration.SensitivityType
import gov.ca.cwds.cans.Constants

global Boolean authorizationResult

rule "Person is sealed"
  dialect "mvel"
  agenda-group "person-read-authorization-rules"
  when
      Person($countyExtId : county.externalId, sensitivityType == SensitivityType.SEALED )
      PerryAccount(privileges contains "Sealed", $countyExtId == countyCwsCode)
  then
      kcontext.getKieRuntime().setGlobal("authorizationResult", true);
end

rule "Person is not sealed"
  dialect "mvel"
  agenda-group "person-read-authorization-rules"
  when
      Person($countyExtId : county.externalId, sensitivityType != SensitivityType.SEALED )
      PerryAccount($countyExtId == countyCwsCode)
  then
      kcontext.getKieRuntime().setGlobal("authorizationResult", true);
end

rule "Person is sensitive"
  dialect "mvel"
  agenda-group "person-read-authorization-rules"
  when
      $person : Person($county : county, sensitivityType == SensitivityType.SENSITIVE)
      PerryAccount(
        countyName.equalsIgnoreCase($county.name),
        privileges contains Constants.Privileges.SENSITIVE_PERSONS
      )
  then
      kcontext.getKieRuntime().setGlobal("authorizationResult", true);
end

rule "Person has no sensitivity type"
  dialect "mvel"
  agenda-group "person-read-authorization-rules"
  when
      Person(sensitivityType == null )
  then
      kcontext.getKieRuntime().setGlobal("authorizationResult", true);
end